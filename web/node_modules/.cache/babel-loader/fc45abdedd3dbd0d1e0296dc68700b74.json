{"ast":null,"code":"var _jsxFileName = \"/home/pat/Desktop/penny_stocks/web/src/cards/CardLineChart.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { ComposedChart, Line, Area, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Scatter, ResponsiveContainer } from 'recharts';\nconst datas = [{\n  name: 'Page A',\n  uv: 4000,\n  pv: 2400,\n  amt: 2400\n}, {\n  name: 'Page B',\n  uv: 3000,\n  pv: 1398,\n  amt: 2210\n}, {\n  name: 'Page C',\n  uv: 2000,\n  pv: 9800,\n  amt: 2290\n}, {\n  name: 'Page D',\n  uv: 2780,\n  pv: 3908,\n  amt: 2000\n}, {\n  name: 'Page E',\n  uv: 1890,\n  pv: 4800,\n  amt: 2181\n}, {\n  name: 'Page F',\n  uv: 2390,\n  pv: 3800,\n  amt: 2500\n}, {\n  name: 'Page G',\n  uv: 3490,\n  pv: 4300,\n  amt: 2100\n}];\nexport default function CardLineChart(props) {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    formatData(props.stockData);\n    console.log(data);\n  }, [props.stockData]);\n\n  function formatData(dats) {\n    setData([]);\n    const arr = [];\n\n    for (let x = 0; x < dats.length; x++) {\n      const ao = parseFloat(dats[x][0].split('/')[0]);\n      const price = parseFloat(dats[x][4].split(':')[1]);\n      const dic = {\n        'ticker': dats[x][1].split(':')[1].split('/')[0],\n        'ao': parseFloat(dats[x][0].split('/')[0]),\n        'price': parseFloat(dats[x][4].split(':')[1]),\n        'percent': Math.round(ao / price * 100000) / 1000\n      };\n      arr.push(dic);\n      data.push(dic);\n    }\n\n    setData(arr);\n    console.log(data);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"100%\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ComposedChart, {\n    width: 500,\n    height: 400,\n    data: data,\n    margin: {\n      top: 20,\n      right: 20,\n      bottom: 20,\n      left: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#f5f5f5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    scale: \"band\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Area, {\n    type: \"monotone\",\n    dataKey: \"percent\",\n    fill: \"#8884d8\",\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: \"ao\",\n    barSize: 20,\n    fill: \"#413ea0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"price\",\n    stroke: \"#ff7300\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Scatter, {\n    dataKey: \"cnt\",\n    fill: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["/home/pat/Desktop/penny_stocks/web/src/cards/CardLineChart.js"],"names":["React","useEffect","useState","ComposedChart","Line","Area","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","Scatter","ResponsiveContainer","datas","name","uv","pv","amt","CardLineChart","props","data","setData","formatData","stockData","console","log","dats","arr","x","length","ao","parseFloat","split","price","dic","Math","round","push","top","right","bottom","left"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  ComposedChart,\n  Line,\n  Area,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  Scatter,\n  ResponsiveContainer,\n} from 'recharts';\n\n\nconst datas = [\n  {\n    name: 'Page A',\n    uv: 4000,\n    pv: 2400,\n    amt: 2400,\n  },\n  {\n    name: 'Page B',\n    uv: 3000,\n    pv: 1398,\n    amt: 2210,\n  },\n  {\n    name: 'Page C',\n    uv: 2000,\n    pv: 9800,\n    amt: 2290,\n  },\n  {\n    name: 'Page D',\n    uv: 2780,\n    pv: 3908,\n    amt: 2000,\n  },\n  {\n    name: 'Page E',\n    uv: 1890,\n    pv: 4800,\n    amt: 2181,\n  },\n  {\n    name: 'Page F',\n    uv: 2390,\n    pv: 3800,\n    amt: 2500,\n  },\n  {\n    name: 'Page G',\n    uv: 3490,\n    pv: 4300,\n    amt: 2100,\n  },\n];\n\nexport default function CardLineChart(props) {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    formatData(props.stockData);\n    console.log(data)\n  }, [props.stockData]);\n  function formatData(dats){\n    setData([]);\n    const arr = [];\n    for(let x=0;x<dats.length;x++){\n      const ao = parseFloat(dats[x][0].split('/')[0]);\n      const price = parseFloat(dats[x][4].split(':')[1]);\n      const dic = {\n        'ticker': dats[x][1].split(':')[1].split('/')[0],\n        'ao': parseFloat(dats[x][0].split('/')[0]),\n        'price': parseFloat(dats[x][4].split(':')[1]),\n        'percent': Math.round(ao/price * 100000) / 1000\n      };\n      arr.push(dic)\n      data.push(dic)\n    }\n    setData(arr)\n    console.log(data)\n  }\n  return (\n    <>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <ComposedChart\n          width={500}\n          height={400}\n          data={data}\n          margin={{\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 20,\n          }}\n        >\n          <CartesianGrid stroke=\"#f5f5f5\" />\n          <XAxis dataKey=\"name\" scale=\"band\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n          <Area type=\"monotone\" dataKey=\"percent\" fill=\"#8884d8\" stroke=\"#8884d8\" />\n          <Bar dataKey=\"ao\" barSize={20} fill=\"#413ea0\" />\n          <Line type=\"monotone\" dataKey=\"price\" stroke=\"#ff7300\" />\n          <Scatter dataKey=\"cnt\" fill=\"red\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}