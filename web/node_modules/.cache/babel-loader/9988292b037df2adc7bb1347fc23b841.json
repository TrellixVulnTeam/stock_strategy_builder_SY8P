{"ast":null,"code":"var _jsxFileName = \"/home/pat/Desktop/stock_strategy_builder/stock_strategy_builder/web/src/components/mainGraph/index.js\";\nimport React, { useEffect, useState, Component } from \"react\";\nimport CardCandleChart from \"../../cards/CardCandleChart\";\nimport CardLineChart from \"../../cards/CardLineChart\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = state => {\n  return {\n    mainGraphType: state.mainGraphType\n  };\n};\n\nfunction ConnectedMainGraph(props) {\n  const [graphs, setGraphs] = useState([]);\n  const [keyCount, setKeyCount] = useState(0);\n  const [stateCount, setStateCount] = useState(0);\n  const line = /*#__PURE__*/React.createElement(CardLineChart, {\n    key: keyCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 18\n    }\n  });\n  const candle = /*#__PURE__*/React.createElement(CardCandleChart, {\n    key: keyCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 20\n    }\n  }); //setGraphs(prev => [...prev, line])\n\n  useEffect(() => {\n    //to avoid initial state passed down from radio buttons on first load\n    if (stateCount !== 0) {\n      chooseMainGraph();\n    } else setStateCount(prev => prev + 1);\n  }, [props.mainGraphType]);\n\n  function chooseMainGraph() {\n    if (props.mainGraphType === 'line') {\n      if (graphs.length !== 0) {\n        console.log('idddddddd', graphs[0]);\n        const filtered = graphs.filter(function (value, index, arr) {\n          return value.props.id !== 'candle';\n        });\n        setGraphs(prev => [...filtered, /*#__PURE__*/React.createElement(CardLineChart, {\n          id: \"line\",\n          key: keyCount,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 49\n          }\n        })]);\n        setKeyCount(prev => prev + 1);\n      } else {\n        setGraphs(prev => [...prev, /*#__PURE__*/React.createElement(CardLineChart, {\n          id: \"line\",\n          key: keyCount,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 45\n          }\n        })]);\n        setKeyCount(prev => prev + 1);\n      }\n    }\n\n    ;\n\n    if (props.mainGraphType === 'candle') {\n      if (graphs.length !== 0) {\n        const filtered = graphs.filter(function (value, index, arr) {\n          return value.id !== 'line';\n        });\n        setGraphs(prev => [...filtered, /*#__PURE__*/React.createElement(CardCandleChart, {\n          id: \"candle\",\n          key: keyCount,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 49\n          }\n        })]);\n        setKeyCount(prev => prev + 1);\n      } else {\n        setGraphs(prev => [...prev, /*#__PURE__*/React.createElement(CardCandleChart, {\n          id: \"candle\",\n          key: keyCount,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 45\n          }\n        })]);\n        setKeyCount(prev => prev + 1);\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, graphs.map((item, index) => /*#__PURE__*/React.createElement(React.Fragment, null, item)));\n}\n\nconst MainGraph = connect(mapStateToProps)(ConnectedMainGraph);\nexport default MainGraph;","map":{"version":3,"sources":["/home/pat/Desktop/stock_strategy_builder/stock_strategy_builder/web/src/components/mainGraph/index.js"],"names":["React","useEffect","useState","Component","CardCandleChart","CardLineChart","connect","mapStateToProps","state","mainGraphType","ConnectedMainGraph","props","graphs","setGraphs","keyCount","setKeyCount","stateCount","setStateCount","line","candle","chooseMainGraph","prev","length","console","log","filtered","filter","value","index","arr","id","map","item","MainGraph"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Component } from \"react\";\nimport CardCandleChart from \"../../cards/CardCandleChart\";\nimport CardLineChart from \"../../cards/CardLineChart\"\nimport { connect } from \"react-redux\";\n\nconst mapStateToProps = state => {\n    return { \n        mainGraphType: state.mainGraphType\n     };\n  };\n\nfunction ConnectedMainGraph(props){\n    const [graphs, setGraphs] = useState([]);\n    const [keyCount, setKeyCount] = useState(0);\n    const [stateCount, setStateCount] = useState(0)\n    const line = <CardLineChart key={keyCount} />;\n    const candle = <CardCandleChart key={keyCount} />\n    //setGraphs(prev => [...prev, line])\n    useEffect(() => {\n        //to avoid initial state passed down from radio buttons on first load\n     if(stateCount !== 0){\n            chooseMainGraph()\n        } else setStateCount(prev => prev + 1);\n\n    }, [props.mainGraphType]);\n\n    function chooseMainGraph(){\n        if(props.mainGraphType === 'line'){\n            if(graphs.length !== 0){\n                console.log('idddddddd',graphs[0])\n                const filtered = graphs.filter(function(value, index, arr){ \n                    return value.props.id !== 'candle';\n                });\n                setGraphs(prev => [...filtered, <CardLineChart id='line' key={keyCount} />]);\n                setKeyCount(prev => prev + 1)\n            } else {\n                setGraphs(prev => [...prev, <CardLineChart id='line' key={keyCount} />]);\n                setKeyCount(prev => prev + 1)\n            }\n        };\n        if(props.mainGraphType === 'candle'){\n            if(graphs.length !== 0){\n                const filtered = graphs.filter(function(value, index, arr){ \n                    return value.id !== 'line';\n                });\n                setGraphs(prev => [...filtered, <CardCandleChart id='candle' key={keyCount} />]);\n                setKeyCount(prev => prev + 1)\n            } else {\n                setGraphs(prev => [...prev, <CardCandleChart id='candle' key={keyCount} />]);\n                setKeyCount(prev => prev + 1)\n            }\n        }\n    }\n    return (\n        <>\n        {graphs.map((item, index) => (\n            <>\n            {item}\n            </>\n        ))}\n        </>\n\n    )\n}\n\nconst MainGraph = connect(\n    mapStateToProps\n    )(ConnectedMainGraph);\n  \n  export default MainGraph;"]},"metadata":{},"sourceType":"module"}